#### Combined data set
framingham_df_ordered <- framingham_df[names(df_2017)]
#### Split train and test set.
set.seed(123)
total_rows <- nrow(framingham_df_ordered) # Get the total number of rows in the dataframe
train_size <- round(total_rows * 0.7)
train_indices <- sample(1:total_rows, train_size)
train_set <- framingham_df_ordered[train_indices, ]
test_set <- rbind(framingham_df_ordered[-train_indices, ],df_2017)
train_set_men <- train_set[train_set$SEX==1,]
train_set_women <- train_set[train_set$SEX==2,]
test_set_men <- test_set[test_set$SEX==1,]
test_set_women <- test_set[test_set$SEX==2,]
#| label: model fit
#| warning: false
#| echo: false
# Fit models with log transforms for all continuous variables.
# We used the train dataset, which is a part of framingham dataset.
# Also, Make two models for men and women separately.
mod_men <- glm(CVD~log(HDLC)+log(TOTCHOL)+log(AGE)+log(SYSBP_UT+1)+
log(SYSBP_T+1)+CURSMOKE+DIABETES,
data= train_set_men[train_set_men$IS.framingham==1,], family= "binomial")
mod_women <- glm(CVD~log(HDLC)+log(TOTCHOL)+log(AGE)+log(SYSBP_UT+1)+
log(SYSBP_T+1)+CURSMOKE+DIABETES,
data= train_set_women[train_set_women$IS.framingham==1,], family= "binomial")
# For Men
Y.fram.test.pred.men <- predict(mod_men, test_set_men[test_set_men$IS.framingham==1,],
type = "response")
Y.fram.test.true.men <- test_set_men$CVD[test_set_men$IS.framingham==1]
# For Women
Y.fram.test.pred.women <- predict(mod_women, test_set_women[test_set_women$IS.framingham==1,],
type = "response")
Y.fram.test.true.women <- test_set_women$CVD[test_set_women$IS.framingham==1]
#| label: performance in framingham
#| warning: false
#| echo: false
# ROC for men in framingham
roc_men <- pROC::roc(Y.fram.test.true.men,Y.fram.test.pred.men)
auc_men <- pROC::auc(roc_men)
brier_score_men <- mean((Y.fram.test.pred.men - Y.fram.test.true.men)^2)
# ROC for women in framingham
roc_women <- pROC::roc(Y.fram.test.true.women,Y.fram.test.pred.women)
auc_women <- pROC::auc(roc_women)
brier_score_women <- mean((Y.fram.test.pred.women - Y.fram.test.true.women)^2)
brier_score_men
brier_score_women
# Assuming you have already calculated roc_men and roc_women using the roc function
# as shown in previous examples
# Plot the ROC curve for men
plot(roc_men, col = "blue", main = "ROC Curves for Men and Women",
xlab = "1 - Specificity", ylab = "Sensitivity")
# Add the ROC curve for women to the same plot
lines(roc_women, col = "red")
# Add a legend to the plot
legend("bottomright", legend = c("Men", "Women"),
col = c("blue", "red"), lwd = 2)
text(0.5, 0.4, auc_men)
text(1, 0.8, auc_women)
# # Print out the AUC and Brier scores
# print(paste("AUC for men:", auc_men))
# print(paste("Brier score for men:", brier_score_men))
# print(paste("AUC for women:", auc_women))
# print(paste("Brier score for women:", brier_score_women))
#| label: transported performance in NHANES
#| warning: false
#| echo: false
# prediction for Pr(S|X_i,D_{test,i}=1) with glm
# X CVD~log(HDLC)+log(TOTCHOL)+log(AGE)+log(SYSBP_UT+1)+log(SYSBP_T+1)+CURSMOKE+DIABETES
# for men
Ps_X_men <- glm(IS.framingham~log(HDLC)+log(TOTCHOL)+log(AGE)+log(SYSBP_UT+1)+log(SYSBP_T+1)+CURSMOKE+DIABETES,
data= test_set_men, family= "binomial")
O_X_men <- (1-Ps_X_men$fitted.values)/Ps_X_men$fitted.values
O_X_men.fram <- O_X_men[test_set_men$IS.framingham==1]
phi_beta_men <- sum(O_X_men.fram*(Y.fram.test.true.men - Y.fram.test.pred.men)^2)/sum(test_set_men$IS.framingham==0)
phi_beta_men
# for women
Ps_X_women <- glm(IS.framingham~log(HDLC)+log(TOTCHOL)+log(AGE)+log(SYSBP_UT+1)+log(SYSBP_T+1)+CURSMOKE+DIABETES,
data= test_set_women, family= "binomial")
O_X_women <- (1-Ps_X_women$fitted.values)/Ps_X_women$fitted.values
O_X_women.fram <- O_X_women[test_set_women$IS.framingham==1]
phi_beta_women <- sum(O_X_women.fram*(Y.fram.test.true.women-Y.fram.test.pred.women)^2)/sum(test_set_women$IS.framingham==0)
phi_beta_women
train_set_cor <- train_set %>% select(c(HDLC,TOTCHOL,AGE,SYSBP,CURSMOKE,DIABETES,BPMEDS,SEX))
CreateTableOne(data = test_set[test_set$IS.framingham==0,], strata = c("SEX"))
tableOne=CreateTableOne(data = test_set[test_set$IS.framingham==0,], strata = c("SEX"))
mean_value <- tableOne[["strata"]][[1]][["contTable"]]["AGE", "Mean"]
mean_value
str(tableOne)
#| echo: false
#| label: train distributions
#| warning: false
continuous_vars <- train_set[, c("SYSBP_T","SYSBP_UT","SYSBP", "AGE", "HDLC", "TOTCHOL")]
# 将数据集转换为长格式
long_data <- train_set %>%
select(SYSBP_T, SYSBP_UT, SYSBP, AGE, HDLC, TOTCHOL) %>%
gather(key = "Variable", value = "Value")
# 为每个变量绘制直方图
ggplot(long_data, aes(x = Value)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~ Variable, scales = "free", nrow = 2) +
theme_minimal() +
labs(x = "Value", y = "Frequency", title = "Distribution of Continuous Variables")
long_data <- train_set %>%
select(SYSBP, SYSBP_T, SYSBP_UT) %>%
gather(key = "Variable", value = "Value")
# 为每个SYSBP变量绘制直方图
ggplot(long_data, aes(x = Value)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~ Variable, scales = "free", ncol = 3) +
theme_minimal() +
labs(x = "Value", y = "Frequency", title = "Distribution of SYSBP Variables")
long_data <- train_set %>%
select(SYSBP_T, SYSBP_UT, SYSBP, AGE, HDLC, TOTCHOL) %>%
gather(key = "Variable", value = "Value")
# 为每个变量绘制直方图
ggplot(long_data, aes(x = Value)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~ Variable, scales = "free", nrow = 2) +
theme_minimal() +
labs(x = "Value", y = "Frequency")
long_data <- continuous_vars %>%
gather(key = "Variable", value = "Value")
# 为每个变量绘制直方图
ggplot(long_data, aes(x = Value)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~ Variable, scales = "free", nrow = 2) +
theme_minimal() +
labs(x = "Value", y = "Frequency")
install.packages("coorplot")
library(coorplot)
install.packages("corrplot")
library(corrplot)
corrplot(cov_matrix, method = "circle", type = "upper",
tl.col = "black", tl.srt = 45,
title = "Covariance Matrix of Selected Variables")
cov_matrix <- cov(continuous_vars, use = "complete.obs")
corrplot(cov_matrix, method = "circle", type = "upper",
tl.col = "black", tl.srt = 45,
title = "Covariance Matrix of Selected Variables")
View(cov_matrix)
long_cov_matrix <- melt(cov_matrix)
cov_matrix <- cor(continuous_vars, use = "complete.obs")
cov_matrix <- cov(continuous_vars, use = "complete.obs")
corrplot(cor_matrix, method = "circle", type = "upper",
tl.col = "black", tl.srt = 45,
title = "Covariance Matrix of Selected Variables")
cor_matrix <- cor(continuous_vars, use = "complete.obs")
corrplot(cor_matrix, method = "circle", type = "upper",
tl.col = "black", tl.srt = 45,
title = "Covariance Matrix of Selected Variables")
corrplot(cor_matrix, method = "circle",
tl.col = "black", tl.srt = 45,
title = "Covariance Matrix of Selected Variables")
cor_matrix[1,2]
cov_matrix[1,2]
cor_matrix
continuous_vars_nhanes <- test_set[test_set$IS.framingham==0,c("SYSBP_T","SYSBP_UT","SYSBP", "AGE", "HDLC", "TOTCHOL")]
cor_matrix_NHANES <-cor(continuous_vars_nhanes, use = "complete.obs")
cor_matrix_NHANES
cor_matrix
train_set_cor <- train_set %>% select(c(HDLC,TOTCHOL,AGE,SYSBP,CURSMOKE,DIABETES,BPMEDS,SEX))
tableOne=CreateTableOne(data = test_set_cor[test_set$IS.framingham==0,], strata = c("SEX"))
tableOne=CreateTableOne(data = test_set[test_set$IS.framingham==0,], strata = c("SEX"))
tableOne
cor=cor_matrix
# SYSBP,AGE,HDLC,TOTCHOL
mean_vec_men=c(126.44,50.15,48.11,183.1)
mean_vec_women=c(123.7,48.9,58.1,190.51)
nrow_men=2105
nrow_women=2205
P_cate_men=c(429,370,627)/2105
P_cate_women=c(316,271,640)/2205
sim_data <- function(cor_matrix,std_vec,mean_vec,p_vec,nrow){
set.seed(123)
cov_matrix <- cor_matrix * (std_vec %*% t(std_vec))
simulated_data <- MASS::mvrnorm(nrow, mu = mean_vec, Sigma = cov_matrix)
simulated_CURSMOKE <- rbinom(n = nrow, size = 1, prob = p_vec[1])
simulated_DIABETES <- rbinom(n = nrow, size = 1, prob = p_vec[2])
simulated_BPMEDS <- rbinom(n = nrow, size = 1, prob = p_vec[3])
# 将模拟的连续变量和分类变量合并成一个数据框
simulated_data <- data.frame(simulated_data)
simulated_data$CURSMOKE <- simulated_CURSMOKE
simulated_data$DIABETES <- simulated_DIABETES
simulated_data$BPMEDS <- simulated_BPMEDS
# 为数据框中的列命名
colnames(simulated_data) <- c("SYSBP","AGE","HDLC","TOTCHOL","CURSMOKE","DIABETES","BPMEDS")
simulated_data$SYSBP_UT <- ifelse(simulated_data$BPMEDS == 0,
simulated_data$SYSBP, 0)
simulated_data$SYSBP_T <- ifelse(simulated_data$BPMEDS == 1,
simulated_data$SYSBP, 0)
return(simulated_data)
}
nrow_men=2105
nrow_women=2205
P_cate_men=c(429,370,627)/2105
P_cate_women=c(316,271,640)/2205
# SYSBP,AGE,HDLC,TOTCHOL
mean_vec_men=c(126.44,50.15,48.11,183.1)
mean_vec_women=c(123.7,48.9,58.1,190.51)
std_vec_men=c(16.83,18.83,13.59,41.65)
std_vec_women=c(20.36,18.57,15.68,41.20)
sim_men <-sim_data(cor_matrix = cor_matrix,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = p_cate_men,nrow = nrow_men)
dim(cor_matrix)
cor_matrix_sim <- cor_matrix[3:6,3:6]
cor_matrix_NHANES_sim <-cor_matrix_NHANES[3:6,3:6]
sim_men <-sim_data(cor_matrix = cor_matrix_sim,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = p_cate_men,nrow = nrow_men)
P_cate_men=c(429,370,627)/2105
P_cate_women=c(316,271,640)/2205
sim_men <-sim_data(cor_matrix = cor_matrix_sim,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = p_cate_men,nrow = nrow_men)
sim_men <-sim_data(cor_matrix = cor_matrix_sim,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men)
cor_matrix_sim_1 <- cor_matrix[3:6,3:6]
cor_matrix_NHANES_sim <-cor_matrix_NHANES[3:6,3:6]
cor_matrix_sim_1 <- cor_matrix[3:6,3:6]
cor_matrix_NHANES_sim <-cor_matrix_NHANES[3:6,3:6]
cor_matrix_sim_2 <- cor_matrix_sim_1*0.3+cor_matrix_NHANES_sim*0.7
cor_matrix_sim_3 <- cor_matrix_sim_1*0.5+cor_matrix_NHANES_sim*0.5
cor_matrix_sim_4 <- cor_matrix_sim_1*0.7+cor_matrix_NHANES_sim*0.3
sim_men_1 <-sim_data(cor_matrix = cor_matrix_sim_1,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men)
sim_men_2 <-sim_data(cor_matrix = cor_matrix_sim_2,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men)
sim_men_3 <-sim_data(cor_matrix = cor_matrix_sim_3,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men)
sim_men_4 <-sim_data(cor_matrix = cor_matrix_sim_4,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men)
sim_women_1 <-sim_data(cor_matrix = cor_matrix_sim_1,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women)
sim_women_2 <-sim_data(cor_matrix = cor_matrix_sim_2,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women)
sim_women_3 <-sim_data(cor_matrix = cor_matrix_sim_3,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women)
sim_women_4 <-sim_data(cor_matrix = cor_matrix_sim_4,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women)
phi_beta_men
Tran_Brier <- function(test_set,Y.fram.test.true,Y.fram.test.pred){
Ps_X <- glm(IS.framingham~log(HDLC)+log(TOTCHOL)+log(AGE)+log(SYSBP_UT+1)+log(SYSBP_T+1)+CURSMOKE+DIABETES,
data= test_set, family= "binomial")
O_X <- (1-Ps_X$fitted.values)/Ps_X$fitted.values
O_X.fram <- O_X[test_set$IS.framingham==1]
phi_beta <- sum(O_X.fram*(Y.fram.test.true - Y.fram.test.pred)^2)/sum(test_set$IS.framingham==0)
phi_beta
}
Tran_Brier(test_set_men,Y.fram.test.true.men,Y.fram.test.pred.men)
phi_beta_men
phi_beta_women
# for women
Tran_Brier(test_set_women,Y.fram.test.true.women,Y.fram.test.pred.women)
phi_beta_sim_men_1 <- Tran_Brier(sim_men_1,Y.fram.test.true.men,Y.fram.test.pred.men)
sim_data <- function(cor_matrix,std_vec,mean_vec,p_vec,nrow){
set.seed(123)
cov_matrix <- cor_matrix * (std_vec %*% t(std_vec))
simulated_data <- MASS::mvrnorm(nrow, mu = mean_vec, Sigma = cov_matrix)
simulated_CURSMOKE <- rbinom(n = nrow, size = 1, prob = p_vec[1])
simulated_DIABETES <- rbinom(n = nrow, size = 1, prob = p_vec[2])
simulated_BPMEDS <- rbinom(n = nrow, size = 1, prob = p_vec[3])
# 将模拟的连续变量和分类变量合并成一个数据框
simulated_data <- data.frame(simulated_data)
simulated_data$CURSMOKE <- simulated_CURSMOKE
simulated_data$DIABETES <- simulated_DIABETES
simulated_data$BPMEDS <- simulated_BPMEDS
# 为数据框中的列命名
colnames(simulated_data) <- c("SYSBP","AGE","HDLC","TOTCHOL","CURSMOKE","DIABETES","BPMEDS")
simulated_data$SYSBP_UT <- ifelse(simulated_data$BPMEDS == 0,
simulated_data$SYSBP, 0)
simulated_data$SYSBP_T <- ifelse(simulated_data$BPMEDS == 1,
simulated_data$SYSBP, 0)
simulated_data$IS.framingham = 0
return(simulated_data)
}
m_men_1 <-sim_data(cor_matrix = cor_matrix_sim_1,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men)
sim_men_2 <-sim_data(cor_matrix = cor_matrix_sim_2,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men)
sim_men_3 <-sim_data(cor_matrix = cor_matrix_sim_3,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men)
sim_men_4 <-sim_data(cor_matrix = cor_matrix_sim_4,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men)
sim_women_1 <-sim_data(cor_matrix = cor_matrix_sim_1,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women)
sim_women_2 <-sim_data(cor_matrix = cor_matrix_sim_2,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women)
sim_women_3 <-sim_data(cor_matrix = cor_matrix_sim_3,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women)
sim_women_4 <-sim_data(cor_matrix = cor_matrix_sim_4,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women)
phi_beta_sim_men_1 <- Tran_Brier(sim_men_1,Y.fram.test.true.men,Y.fram.test.pred.men)
sim_data <- function(cor_matrix,std_vec,mean_vec,p_vec,nrow){
set.seed(123)
cov_matrix <- cor_matrix * (std_vec %*% t(std_vec))
simulated_data <- MASS::mvrnorm(nrow, mu = mean_vec, Sigma = cov_matrix)
simulated_CURSMOKE <- rbinom(n = nrow, size = 1, prob = p_vec[1])
simulated_DIABETES <- rbinom(n = nrow, size = 1, prob = p_vec[2])
simulated_BPMEDS <- rbinom(n = nrow, size = 1, prob = p_vec[3])
# 将模拟的连续变量和分类变量合并成一个数据框
simulated_data <- data.frame(simulated_data)
simulated_data$CURSMOKE <- simulated_CURSMOKE
simulated_data$DIABETES <- simulated_DIABETES
simulated_data$BPMEDS <- simulated_BPMEDS
# 为数据框中的列命名
colnames(simulated_data) <- c("SYSBP","AGE","HDLC","TOTCHOL","CURSMOKE","DIABETES","BPMEDS")
simulated_data$SYSBP_UT <- ifelse(simulated_data$BPMEDS == 0,
simulated_data$SYSBP, 0)
simulated_data$SYSBP_T <- ifelse(simulated_data$BPMEDS == 1,
simulated_data$SYSBP, 0)
simulated_data$IS.framingham = 0
return(simulated_data)
}
sim_men_1 <-sim_data(cor_matrix = cor_matrix_sim_1,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men)
sim_men_2 <-sim_data(cor_matrix = cor_matrix_sim_2,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men)
sim_men_3 <-sim_data(cor_matrix = cor_matrix_sim_3,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men)
sim_men_4 <-sim_data(cor_matrix = cor_matrix_sim_4,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men)
sim_women_1 <-sim_data(cor_matrix = cor_matrix_sim_1,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women)
sim_women_2 <-sim_data(cor_matrix = cor_matrix_sim_2,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women)
sim_women_3 <-sim_data(cor_matrix = cor_matrix_sim_3,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women)
sim_women_4 <-sim_data(cor_matrix = cor_matrix_sim_4,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women)
phi_beta_sim_men_1 <- Tran_Brier(sim_men_1,Y.fram.test.true.men,Y.fram.test.pred.men)
phi_beta_sim_men_1
phi_beta_sim_men_2 <- Tran_Brier(sim_men_2,Y.fram.test.true.men,Y.fram.test.pred.men)
phi_beta_sim_men_2
names(sim_men_1)
test_set_temp <- test_set[,names(sim_men_1)]
sim_data <- function(cor_matrix,std_vec,mean_vec,p_vec,nrow,test_set){
set.seed(123)
cov_matrix <- cor_matrix * (std_vec %*% t(std_vec))
simulated_data <- MASS::mvrnorm(nrow, mu = mean_vec, Sigma = cov_matrix)
simulated_CURSMOKE <- rbinom(n = nrow, size = 1, prob = p_vec[1])
simulated_DIABETES <- rbinom(n = nrow, size = 1, prob = p_vec[2])
simulated_BPMEDS <- rbinom(n = nrow, size = 1, prob = p_vec[3])
# 将模拟的连续变量和分类变量合并成一个数据框
simulated_data <- data.frame(simulated_data)
simulated_data$CURSMOKE <- simulated_CURSMOKE
simulated_data$DIABETES <- simulated_DIABETES
simulated_data$BPMEDS <- simulated_BPMEDS
# 为数据框中的列命名
colnames(simulated_data) <- c("SYSBP","AGE","HDLC","TOTCHOL","CURSMOKE","DIABETES","BPMEDS")
simulated_data$SYSBP_UT <- ifelse(simulated_data$BPMEDS == 0,
simulated_data$SYSBP, 0)
simulated_data$SYSBP_T <- ifelse(simulated_data$BPMEDS == 1,
simulated_data$SYSBP, 0)
simulated_data$IS.framingham = 0
test_set_temp <- test_set[,names(simulated_data)]
simulated_data <- rbind(simulated_data,test_set_temp)
return(simulated_data)
}
sim_men_1 <-sim_data(cor_matrix = cor_matrix_sim_1,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men,test_set = test_set_men)
phi_beta_sim_men_1 <- Tran_Brier(sim_men_1,Y.fram.test.true.men,Y.fram.test.pred.men)
phi_beta_sim_men_1
#| echo: false
#| label: sim data
#| warning: false
cor_matrix_sim_1 <- cor_matrix[3:6,3:6]
cor_matrix_NHANES_sim <-cor_matrix_NHANES[3:6,3:6]
cor_matrix_sim_2 <- cor_matrix_sim_1*0.3+cor_matrix_NHANES_sim*0.7
cor_matrix_sim_3 <- cor_matrix_sim_1*0.5+cor_matrix_NHANES_sim*0.5
cor_matrix_sim_4 <- cor_matrix_sim_1*0.7+cor_matrix_NHANES_sim*0.3
nrow_men=2105
nrow_women=2205
P_cate_men=c(429,370,627)/2105
P_cate_women=c(316,271,640)/2205
# SYSBP,AGE,HDLC,TOTCHOL
mean_vec_men=c(126.44,50.15,48.11,183.1)
mean_vec_women=c(123.7,48.9,58.1,190.51)
std_vec_men=c(16.83,18.83,13.59,41.65)
std_vec_women=c(20.36,18.57,15.68,41.20)
### Get covariance matrix from Framingham training set. Substitute the variance with what we got from NHanes_table
sim_data <- function(cor_matrix,std_vec,mean_vec,p_vec,nrow,test_set){
set.seed(123)
cov_matrix <- cor_matrix * (std_vec %*% t(std_vec))
simulated_data <- MASS::mvrnorm(nrow, mu = mean_vec, Sigma = cov_matrix)
simulated_CURSMOKE <- rbinom(n = nrow, size = 1, prob = p_vec[1])
simulated_DIABETES <- rbinom(n = nrow, size = 1, prob = p_vec[2])
simulated_BPMEDS <- rbinom(n = nrow, size = 1, prob = p_vec[3])
# 将模拟的连续变量和分类变量合并成一个数据框
simulated_data <- data.frame(simulated_data)
simulated_data$CURSMOKE <- simulated_CURSMOKE
simulated_data$DIABETES <- simulated_DIABETES
simulated_data$BPMEDS <- simulated_BPMEDS
# 为数据框中的列命名
colnames(simulated_data) <- c("SYSBP","AGE","HDLC","TOTCHOL","CURSMOKE","DIABETES","BPMEDS")
simulated_data$SYSBP_UT <- ifelse(simulated_data$BPMEDS == 0,
simulated_data$SYSBP, 0)
simulated_data$SYSBP_T <- ifelse(simulated_data$BPMEDS == 1,
simulated_data$SYSBP, 0)
simulated_data$IS.framingham = 0
test_set_temp <- test_set[,names(simulated_data)]
simulated_data <- rbind(simulated_data,test_set_temp)
return(simulated_data)
}
sim_men_1 <-sim_data(cor_matrix = cor_matrix_sim_1,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men,test_set = test_set_men)
sim_men_2 <-sim_data(cor_matrix = cor_matrix_sim_2,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men,test_set = test_set_men)
sim_men_3 <-sim_data(cor_matrix = cor_matrix_sim_3,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men,test_set = test_set_men)
sim_men_4 <-sim_data(cor_matrix = cor_matrix_sim_4,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men,test_set = test_set_men)
sim_women_1 <-sim_data(cor_matrix = cor_matrix_sim_1,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women,test_set = test_set_women)
sim_women_2 <-sim_data(cor_matrix = cor_matrix_sim_2,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women,test_set = test_set_women)
sim_women_3 <-sim_data(cor_matrix = cor_matrix_sim_3,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women,test_set = test_set_women)
sim_women_4 <-sim_data(cor_matrix = cor_matrix_sim_4,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women,test_set = test_set_women)
phi_beta_sim_men_1 <- Tran_Brier(sim_men_1,Y.fram.test.true.men,Y.fram.test.pred.men)
phi_beta_sim_men_2 <- Tran_Brier(sim_men_2,Y.fram.test.true.men,Y.fram.test.pred.men)
phi_beta_sim_men_3 <- Tran_Brier(sim_men_3,Y.fram.test.true.men,Y.fram.test.pred.men)
phi_beta_sim_men_4 <- Tran_Brier(sim_men_4,Y.fram.test.true.men,Y.fram.test.pred.men)
phi_beta_sim_women_1 <- Tran_Brier(sim_women_1,Y.fram.test.true.women,Y.fram.test.pred.women)
phi_beta_sim_women_2 <- Tran_Brier(sim_women_2,Y.fram.test.true.women,Y.fram.test.pred.women)
phi_beta_sim_women_3 <- Tran_Brier(sim_women_3,Y.fram.test.true.women,Y.fram.test.pred.women)
phi_beta_sim_women_4 <- Tran_Brier(sim_women_4,Y.fram.test.true.women,Y.fram.test.pred.women)
phi_beta_sim_women_4
phi_beta_sim_women_3
phi_beta_sim_women_2
phi_beta_sim_women_1
phi_beta_sim_men_4
phi_beta_sim_men_3
phi_beta_sim_men_2
phi_beta_sim_men_1
#| echo: false
#| label: sim table
#| warning: false
# Create a data frame with the values
data <- data.frame(
"Men" = c(
phi_beta_sim_men_1,
phi_beta_sim_men_2,
phi_beta_sim_men_3,
phi_beta_sim_men_4
),
"Women" = c(
phi_beta_sim_women_1,
phi_beta_sim_women_2,
phi_beta_sim_women_3,
phi_beta_sim_women_4
)
)
# Render the table using kable
knitr::kable(data, format = "markdown", col.names = c("Male", "Female")) %>% add_caption("Table: Brier Scores of simulation data sets")
kable(data, format = "latex", booktabs = TRUE,
col.names = c("Male", "Female")) %>%
kable_styling(latex_options = c("hold_position")) %>%
add_footnote(caption = "Brier Scores of simulation data sets", footnote_as_chunk = TRUE,
threeparttable = TRUE)
library(kableExtra)
kable(data, format = "latex", booktabs = TRUE,
col.names = c("Male", "Female")) %>%
kable_styling(latex_options = c("hold_position")) %>%
add_footnote(caption = "Brier Scores of simulation data sets", footnote_as_chunk = TRUE,
threeparttable = TRUE)
kable(table_matrix, format = "latex", booktabs = TRUE,
col.names = c("Variable", "Male", "Female", "p-value")) %>%
kable_styling(latex_options = c("hold_position")) %>%
add_footnote(caption = "framingham summary", footnote_as_chunk = TRUE,
threeparttable = TRUE)
View(long_data)
# Create a caption as a footnote
caption_text <- "Table 1: Framingham Summary"
# Render the table with a caption as a footnote using kableExtra
table <- kable(
table_matrix,
format = "latex",
booktabs = TRUE,
col.names = c("Variable", "Male", "Female", "p-value")
) %>%
kable_styling(latex_options = c("hold_position")) %>%
footnote(general = caption_text)
# Print the table
print(table)
# Render the table with a caption as a footnote using kableExtra
kable(
table_matrix,
format = "latex",
booktabs = TRUE,
col.names = c("Variable", "Male", "Female", "p-value")
) %>%
kable_styling(latex_options = c("hold_position")) %>%
footnote(general = caption_text)
framingham_df <- framingham %>% select(CVD, TIMECVD, SEX, TOTCHOL, AGE,
SYSBP, DIABP, CURSMOKE, DIABETES, BPMEDS,
HDLC, BMI)
framingham_df <- framingham %>% select(CVD, TIMECVD, SEX, TOTCHOL, AGE,
SYSBP, DIABP, CURSMOKE, DIABETES, BPMEDS,
HDLC, BMI)
rm(list=ls())
#| label: library and function define
#| echo: false
#| warning: false
library(riskCommunicator)
library(tidyverse)
library(tableone)
library(nhanesA)
library(knitr)
library(pROC)
library(kableExtra)
library(corrplot)
library(MASS)
#library(Metrics)
missing_heatmap <- function(data,title,color_pre = "yellow", color_miss = "black"){
missing_values <- is.na(data)
# Melt the matrix for use with ggplot
missing_melted <- reshape2::melt(missing_values,
id.vars = rownames(missing_values))
# Create the heatmap
g <- ggplot2::ggplot(missing_melted, aes(x = Var2, y = Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_manual(name = "", labels = c("Present", "Missing"),
values = c(color_pre,color_miss)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Variables", y = "Observations",title = title)+
theme(plot.title = element_text(hjust = 0.5))
return(g)
}
data("framingham")
framingham_df <- framingham %>% select(CVD, TIMECVD, SEX, TOTCHOL, AGE,
SYSBP, DIABP, CURSMOKE, DIABETES, BPMEDS,
HDLC, BMI)
framingham_df <- framingham %>% select(c(CVD, TIMECVD, SEX, TOTCHOL, AGE,
SYSBP, DIABP, CURSMOKE, DIABETES, BPMEDS,
HDLC, BMI))
data("framingham")
framingham_df <- framingham %>% select(c(CVD, TIMECVD, SEX, TOTCHOL, AGE,
SYSBP, DIABP, CURSMOKE, DIABETES, BPMEDS,
HDLC, BMI))
data("framingham")
library(riskCommunicator)
data("framingham")
framingham_df <- framingham %>% select(c(CVD, TIMECVD, SEX, TOTCHOL, AGE,
SYSBP, DIABP, CURSMOKE, DIABETES, BPMEDS,
HDLC, BMI))
library(tidyverse)
framingham_df <- framingham %>% select(c(CVD, TIMECVD, SEX, TOTCHOL, AGE,
SYSBP, DIABP, CURSMOKE, DIABETES, BPMEDS,
HDLC, BMI))
