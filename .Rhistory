theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Variables", y = "Observations",title = title)+
theme(plot.title = element_text(hjust = 0.5))
return(g)
}
#| warning: false
#| label: framingham_data
#| echo: false
data("framingham")
# The Framingham data has been used to create models for cardiovascular risk.
# The variable selection and model below are designed to mimic the models used
# in the paper General Cardiovascular Risk Profile for Use in Primary Care
# This paper is available (cvd_risk_profile.pdf) on Canvas.
framingham_df <- framingham %>% select(c(CVD, TIMECVD, SEX, TOTCHOL, AGE,
SYSBP, DIABP, CURSMOKE, DIABETES, BPMEDS,
HDLC, BMI))
framingham_df <- na.omit(framingham_df)
CreateTableOne(data=framingham_df, strata = c("SEX"))
# Get blood pressure based on whether or not on BPMEDS
framingham_df$SYSBP_UT <- ifelse(framingham_df$BPMEDS == 0,
framingham_df$SYSBP, 0)
framingham_df$SYSBP_T <- ifelse(framingham_df$BPMEDS == 1,
framingham_df$SYSBP, 0)
# Looking at risk within 15 years - remove censored data
dim(framingham_df)
framingham_df <- framingham_df %>%
filter(!(CVD == 0 & TIMECVD <= 365*15)) %>%
select(-c(TIMECVD))
dim(framingham_df)
# Filter to each sex
framingham_df_men <- framingham_df %>% filter(SEX == 1)
framingham_df_women <- framingham_df %>% filter(SEX == 2)
# Fit models with log transforms for all continuous variables
mod_men <- glm(CVD~log(HDLC)+log(TOTCHOL)+log(AGE)+log(SYSBP_UT+1)+
log(SYSBP_T+1)+CURSMOKE+DIABETES,
data= framingham_df_men, family= "binomial")
mod_women <- glm(CVD~log(HDLC)+log(TOTCHOL)+log(AGE)+log(SYSBP_UT+1)+
log(SYSBP_T+1)+CURSMOKE+DIABETES,
data= framingham_df_women, family= "binomial")
a <- CreateTableOne(data=framingham_df, strata = c("SEX"))
table_matrix <- print(a, printToggle = FALSE, noSpaces = TRUE)[,-4]
colnames(table_matrix)[1] <- "Male"
colnames(table_matrix)[2] <- "Female"
# Use kable to render the table
kable(table_matrix, format = "latex", booktabs = TRUE,
col.names = c("Variable", "Male", "Female", "p-value"))
#| echo: false
#| label: nhanes_data
#| warning: false
# The NHANES data here finds the same covariates among this national survey data
library(nhanesA)
# blood pressure, demographic, bmi, smoking, and hypertension info
bpx_2017 <- nhanes("BPX_J") %>%
select(SEQN, BPXSY1 ) %>%
rename(SYSBP = BPXSY1)
demo_2017 <- nhanes("DEMO_J") %>%
select(SEQN, RIAGENDR, RIDAGEYR) %>%
rename(SEX = RIAGENDR, AGE = RIDAGEYR)
bmx_2017 <- nhanes("BMX_J") %>%
select(SEQN, BMXBMI) %>%
rename(BMI = BMXBMI)
smq_2017 <- nhanes("SMQ_J") %>%
mutate(CURSMOKE = case_when(SMQ040 %in% c(1,2) ~ 1,
SMQ040 == 3 ~ 0,
SMQ020 == 2 ~ 0)) %>%
select(SEQN, CURSMOKE)
bpq_2017 <- nhanes("BPQ_J") %>%
mutate(BPMEDS = case_when(
BPQ020 == 2 ~ 0,
BPQ040A == 2 ~ 0,
BPQ050A == 1 ~ 1,
TRUE ~ NA )) %>%
select(SEQN, BPMEDS)
tchol_2017 <- nhanes("TCHOL_J") %>%
select(SEQN, LBXTC) %>%
rename(TOTCHOL = LBXTC)
hdl_2017 <- nhanes("HDL_J") %>%
select(SEQN, LBDHDD) %>%
rename(HDLC = LBDHDD)
diq_2017 <- nhanes("DIQ_J") %>%
mutate(DIABETES = case_when(DIQ010 == 1 ~ 1,
DIQ010 %in% c(2,3) ~ 0,
TRUE ~ NA)) %>%
select(SEQN, DIABETES)
# Join data from different tables
df_2017 <- bpx_2017 %>%
full_join(demo_2017, by = "SEQN") %>%
full_join(bmx_2017, by = "SEQN") %>%
full_join(hdl_2017, by = "SEQN") %>%
full_join(smq_2017, by = "SEQN") %>%
full_join(bpq_2017, by = "SEQN") %>%
full_join(tchol_2017, by = "SEQN") %>%
full_join(diq_2017, by = "SEQN")
CreateTableOne(data = df_2017, strata = c("SEX"))
b <- CreateTableOne(data = df_2017, strata = c("SEX"))
table_matrix <- print(b, printToggle = FALSE, noSpaces = TRUE)[,-4]
colnames(table_matrix)[1] <- "Male"
colnames(table_matrix)[2] <- "Female"
# Use kable to render the table
kable(table_matrix, format = "latex", booktabs = TRUE,
col.names = c("Variable", "Male", "Female", "p-value"))
# knitr::kable(table_matrix, format = "latex", booktabs = TRUE)
#| label: missing data
#| warning: false
#| echo: false
missing_heatmap(data = framingham_df, title = "framingham","yellow","black")
missing_heatmap(data = df_2017, title = "NHANES_2017","yellow","black")
mean(is.na(df_2017$BPMEDS))
df_2017.omit <- na.omit(df_2017)
#missing_heatmap(data = framingham_df, title = "framingham","yellow","black")
missing_heatmap(data = df_2017, title = "NHANES_2017","yellow","black")
#| echo: false
#| label: nhanes_data
#| warning: false
# The NHANES data here finds the same covariates among this national survey data
library(nhanesA)
# blood pressure, demographic, bmi, smoking, and hypertension info
bpx_2017 <- nhanes("BPX_J") %>%
select(SEQN, BPXSY1 ) %>%
rename(SYSBP = BPXSY1)
demo_2017 <- nhanes("DEMO_J") %>%
select(SEQN, RIAGENDR, RIDAGEYR) %>%
rename(SEX = RIAGENDR, AGE = RIDAGEYR)
bmx_2017 <- nhanes("BMX_J") %>%
select(SEQN, BMXBMI) %>%
rename(BMI = BMXBMI)
smq_2017 <- nhanes("SMQ_J") %>%
mutate(CURSMOKE = case_when(SMQ040 %in% c(1,2) ~ 1,
SMQ040 == 3 ~ 0,
SMQ020 == 2 ~ 0)) %>%
select(SEQN, CURSMOKE)
bpq_2017 <- nhanes("BPQ_J") %>%
mutate(BPMEDS = case_when(
BPQ020 == 2 ~ 0,
BPQ040A == 2 ~ 0,
BPQ050A == 1 ~ 1,
TRUE ~ NA )) %>%
select(SEQN, BPMEDS)
tchol_2017 <- nhanes("TCHOL_J") %>%
select(SEQN, LBXTC) %>%
rename(TOTCHOL = LBXTC)
hdl_2017 <- nhanes("HDL_J") %>%
select(SEQN, LBDHDD) %>%
rename(HDLC = LBDHDD)
diq_2017 <- nhanes("DIQ_J") %>%
mutate(DIABETES = case_when(DIQ010 == 1 ~ 1,
DIQ010 %in% c(2,3) ~ 0,
TRUE ~ NA)) %>%
select(SEQN, DIABETES)
# Join data from different tables
df_2017 <- bpx_2017 %>%
full_join(demo_2017, by = "SEQN") %>%
full_join(bmx_2017, by = "SEQN") %>%
full_join(hdl_2017, by = "SEQN") %>%
full_join(smq_2017, by = "SEQN") %>%
full_join(bpq_2017, by = "SEQN") %>%
full_join(tchol_2017, by = "SEQN") %>%
full_join(diq_2017, by = "SEQN")
# Get blood pressure based on whether or not on BPMEDS
df_2017$SYSBP_UT <- ifelse(df_2017$BPMEDS == 0,
df_2017$SYSBP, 0)
df_2017$SYSBP_T <- ifelse(df_2017$BPMEDS == 1,
df_2017$SYSBP, 0)
CreateTableOne(data = df_2017, strata = c("SEX"))
b <- CreateTableOne(data = df_2017, strata = c("SEX"))
table_matrix <- print(b, printToggle = FALSE, noSpaces = TRUE)[,-4]
colnames(table_matrix)[1] <- "Male"
colnames(table_matrix)[2] <- "Female"
# Use kable to render the table
kable(table_matrix, format = "latex", booktabs = TRUE,
col.names = c("Variable", "Male", "Female", "p-value"))
# knitr::kable(table_matrix, format = "latex", booktabs = TRUE)
#| label: missing data
#| warning: false
#| echo: false
#missing_heatmap(data = framingham_df, title = "framingham","yellow","black")
missing_heatmap(data = df_2017, title = "NHANES_2017","yellow","black")
df_2017.omit <- na.omit(df_2017)
#missing_heatmap(data = framingham_df, title = "framingham","yellow","black")
missing_heatmap(data = df_2017.omit, title = "NHANES_2017","yellow","black")
#missing_heatmap(data = framingham_df, title = "framingham","yellow","black")
missing_heatmap(data = df_2017, title = "NHANES_2017","yellow","black")
unique(df_2017.omit$CURSMOKE)
df_2017.omit_men <-  df_2017 %>% filter(SEX == 1)
df_2017.omit_women <-  df_2017 %>% filter(SEX == 2)
df_2017.omit <- na.omit(df_2017) %>% select(-DIABP)
df_2017.omit <- na.omit(df_2017) %>% select(-`DIABP`)
df_2017.omit <- na.omit(df_2017) %>% select(-c(`DIABP`)
framingham_df <- framingham_df %>% select(-c(DIABP))
framingham_df <- framingham %>% select(c(CVD, TIMECVD, SEX, TOTCHOL, AGE,
SYSBP, DIABP, CURSMOKE, DIABETES, BPMEDS,
HDLC, BMI))
framingham_df <- na.omit(framingham_df)
CreateTableOne(data=framingham_df, strata = c("SEX"))
framingham_df <- framingham_df %>% select(-c(DIABP))
# Filter to each sex
framingham_df_men <- framingham_df %>% filter(SEX == 1)
framingham_df_women <- framingham_df %>% filter(SEX == 2)
View(df_2017)
framingham_df <- framingham_df %>% select(-c(DIABP)) %>% mutate(SEQN = 0)
rm(list=ls())
#| label: library and function define
#| echo: false
#| warning: false
library(riskCommunicator)
library(tidyverse)
library(tableone)
library(nhanesA)
library(knitr)
missing_heatmap <- function(data,title,color_pre = "yellow", color_miss = "black"){
missing_values <- is.na(data)
# Melt the matrix for use with ggplot
missing_melted <- reshape2::melt(missing_values,
id.vars = rownames(missing_values))
# Create the heatmap
g <- ggplot2::ggplot(missing_melted, aes(x = Var2, y = Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_manual(name = "", labels = c("Present", "Missing"),
values = c(color_pre,color_miss)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Variables", y = "Observations",title = title)+
theme(plot.title = element_text(hjust = 0.5))
return(g)
}
#| warning: false
#| label: framingham_data
#| echo: false
data("framingham")
# The Framingham data has been used to create models for cardiovascular risk.
# The variable selection and model below are designed to mimic the models used
# in the paper General Cardiovascular Risk Profile for Use in Primary Care
# This paper is available (cvd_risk_profile.pdf) on Canvas.
framingham_df <- framingham %>% select(c(CVD, TIMECVD, SEX, TOTCHOL, AGE,
SYSBP, DIABP, CURSMOKE, DIABETES, BPMEDS,
HDLC, BMI))
framingham_df <- na.omit(framingham_df)
# CreateTableOne(data=framingham_df, strata = c("SEX"))
# Get blood pressure based on whether or not on BPMEDS
framingham_df$SYSBP_UT <- ifelse(framingham_df$BPMEDS == 0,
framingham_df$SYSBP, 0)
framingham_df$SYSBP_T <- ifelse(framingham_df$BPMEDS == 1,
framingham_df$SYSBP, 0)
# Looking at risk within 15 years - remove censored data
# dim(framingham_df)
framingham_df <- framingham_df %>%
filter(!(CVD == 0 & TIMECVD <= 365*15)) %>%
select(-c(TIMECVD))
# dim(framingham_df)
a <- CreateTableOne(data=framingham_df, strata = c("SEX"))
table_matrix <- print(a, printToggle = FALSE, noSpaces = TRUE)[,-4]
colnames(table_matrix)[1] <- "Male"
colnames(table_matrix)[2] <- "Female"
# Use kable to render the table
kable(table_matrix, format = "latex", booktabs = TRUE,
col.names = c("Variable", "Male", "Female", "p-value"))
# blood pressure, demographic, bmi, smoking, and hypertension info
bpx_2017 <- nhanes("BPX_J") %>%
select(SEQN, BPXSY1 ) %>%
rename(SYSBP = BPXSY1)
#| echo: false
#| label: nhanes_data
#| warning: false
# The NHANES data here finds the same covariates among this national survey data
library(nhanesA)
# blood pressure, demographic, bmi, smoking, and hypertension info
bpx_2017 <- nhanes("BPX_J") %>%
select(SEQN, BPXSY1 ) %>%
rename(SYSBP = BPXSY1)
demo_2017 <- nhanes("DEMO_J") %>%
select(SEQN, RIAGENDR, RIDAGEYR) %>%
rename(SEX = RIAGENDR, AGE = RIDAGEYR)
bmx_2017 <- nhanes("BMX_J") %>%
select(SEQN, BMXBMI) %>%
rename(BMI = BMXBMI)
smq_2017 <- nhanes("SMQ_J") %>%
mutate(CURSMOKE = case_when(SMQ040 %in% c(1,2) ~ 1,
SMQ040 == 3 ~ 0,
SMQ020 == 2 ~ 0)) %>%
select(SEQN, CURSMOKE)
bpq_2017 <- nhanes("BPQ_J") %>%
mutate(BPMEDS = case_when(
BPQ020 == 2 ~ 0,
BPQ040A == 2 ~ 0,
BPQ050A == 1 ~ 1,
TRUE ~ NA )) %>%
select(SEQN, BPMEDS)
tchol_2017 <- nhanes("TCHOL_J") %>%
select(SEQN, LBXTC) %>%
rename(TOTCHOL = LBXTC)
hdl_2017 <- nhanes("HDL_J") %>%
select(SEQN, LBDHDD) %>%
rename(HDLC = LBDHDD)
diq_2017 <- nhanes("DIQ_J") %>%
mutate(DIABETES = case_when(DIQ010 == 1 ~ 1,
DIQ010 %in% c(2,3) ~ 0,
TRUE ~ NA)) %>%
select(SEQN, DIABETES)
# Join data from different tables
df_2017 <- bpx_2017 %>%
full_join(demo_2017, by = "SEQN") %>%
full_join(bmx_2017, by = "SEQN") %>%
full_join(hdl_2017, by = "SEQN") %>%
full_join(smq_2017, by = "SEQN") %>%
full_join(bpq_2017, by = "SEQN") %>%
full_join(tchol_2017, by = "SEQN") %>%
full_join(diq_2017, by = "SEQN")
# Get blood pressure based on whether or not on BPMEDS
df_2017$SYSBP_UT <- ifelse(df_2017$BPMEDS == 0,
df_2017$SYSBP, 0)
df_2017$SYSBP_T <- ifelse(df_2017$BPMEDS == 1,
df_2017$SYSBP, 0)
CreateTableOne(data = df_2017, strata = c("SEX"))
b <- CreateTableOne(data = df_2017, strata = c("SEX"))
table_matrix <- print(b, printToggle = FALSE, noSpaces = TRUE)[,-4]
colnames(table_matrix)[1] <- "Male"
colnames(table_matrix)[2] <- "Female"
# Use kable to render the table
kable(table_matrix, format = "latex", booktabs = TRUE,
col.names = c("Variable", "Male", "Female", "p-value"))
# knitr::kable(table_matrix, format = "latex", booktabs = TRUE)
#| label: missing data
#| warning: false
#| echo: false
#missing_heatmap(data = framingham_df, title = "framingham","yellow","black")
missing_heatmap(data = df_2017, title = "NHANES_2017","yellow","black")
df_2017 <- na.omit(df_2017)
df_2017 <- na.omit(df_2017)
# Remove DIABP from framingham_df
framingham_df <- framingham_df %>% select(-c(DIABP)) %>% mutate(SEQN = 0)
df_2017.omit <- df_2017.omit %>% mutate(CVD = 0)
df_2017 <- df_2017 %>% mutate(CVD = 0)
# Filter to each sex
framingham_df_men <- framingham_df %>% filter(SEX == 1)
framingham_df_women <- framingham_df %>% filter(SEX == 2)
df_2017_men <-  df_2017 %>% filter(SEX == 1)
df_2017_women <-  df_2017 %>% filter(SEX == 2)
framingham_df <- framingham_df %>% mutate(IS.framingham = 1)
df_2017 <- df_2017 %>% mutate(IS.framingham = 0)
#### Combined data set
Combined <- rbind(framingham_df,df_2017)
#### Combined data set
framingham_df_ordered <- framingham_df[names(df_2017)]
all.equal(names(framingham_df_ordered),names(df_2017))
Combined_df <- rbind(framingham_df_ordered,df_2017)
set.seed(123)
total_rows <- nrow(Combined_df) # Get the total number of rows in the dataframe
train_size <- round(total_rows * 0.7)
train_indices <- sample(1:total_rows, train_size)
train_set <- Combined_df[train_indices, ]
test_set <- Combined_df[-train_indices, ]
a = train_set$SEX==1 & train_set$IS.framingham==1
mod_men <- glm(CVD~log(HDLC)+log(TOTCHOL)+log(AGE)+log(SYSBP_UT+1)+
log(SYSBP_T+1)+CURSMOKE+DIABETES,
data= train_set[train_set$SEX==1 & train_set$IS.framingham==1,], family= "binomial")
mod_women <- glm(CVD~log(HDLC)+log(TOTCHOL)+log(AGE)+log(SYSBP_UT+1)+
log(SYSBP_T+1)+CURSMOKE+DIABETES,
data= train_set[train_set$SEX==2 & train_set$IS.framingham==1,], family= "binomial")
library(pROC)
library(Metrics)
####
library(pROC)
library(Metrics)
# For Men
roc_men <- roc(test_set$CVD[test_set$SEX==1 & test_set$IS.framingham==1],
predict(mod_men, test_set[test_set$SEX==1 & test_set$IS.framingham==1,],
type = "response"))
auc_men <- auc(roc_men)
brier_score_men <- brier(test_set$CVD[test_set$SEX==1 & test_set$IS.framingham==1],
predict(mod_men, test_set[test_set$SEX==1 & test_set$IS.framingham==1,],
type = "response"))
?brier
??brier
Y=test_set$CVD[test_set$SEX==1 & test_set$IS.framingham==1]
Y.predict=predict(mod_men, test_set[test_set$SEX==1 & test_set$IS.framingham==1,],
type = "response")
?roc
?auc
auc_men <- pROC::auc(roc_men)
brier_score_men <- brier(test_set$CVD[test_set$SEX==1 & test_set$IS.framingham==1],
predict(mod_men, test_set[test_set$SEX==1 & test_set$IS.framingham==1,],
type = "response"))
??Brier
brier_score_men <- mean((predict(mod_men, test_set[test_set$SEX==1 & test_set$IS.framingham==1,],
type = "response") - test_set$CVD[test_set$SEX==1 & test_set$IS.framingham==1])^2)
# Plot ROC for Men
plot(roc_men, main = "ROC Curve for Men")
# Add AUC to the plot
text(0.6, 0.2, paste("AUC =", round(auc_men, 2)))
auc_men
plot(roc_men, main = "ROC Curve for Men")
# Add AUC to the plot
text(0.6, 0.2, auc_men)
brier_score_women <- mean((predict(mod_women, test_set[test_set$SEX==2 & test_set$IS.framingham==1,],
type = "response") - test_set$CVD[test_set$SEX==2 & test_set$IS.framingham==1])^2)
library(pROC)
library(Metrics)
# For Men
roc_men <- pROC::roc(test_set$CVD[test_set$SEX==1 & test_set$IS.framingham==1],
predict(mod_men, test_set[test_set$SEX==1 & test_set$IS.framingham==1,],
type = "response"))
auc_men <- pROC::auc(roc_men)
brier_score_men <- mean((predict(mod_men, test_set[test_set$SEX==1 & test_set$IS.framingham==1,],
type = "response") - test_set$CVD[test_set$SEX==1 & test_set$IS.framingham==1])^2)
# Plot ROC for Men
plot(roc_men, main = "ROC Curve for Men")
# Add AUC to the plot
text(0.6, 0.2, auc_men)
# For Women
roc_women <- pROC::roc(test_set$CVD[test_set$SEX==2 & test_set$IS.framingham==1],
predict(mod_women, test_set[test_set$SEX==2 & test_set$IS.framingham==1,],
type = "response"))
auc_women <- pROC::auc(roc_women)
brier_score_women <- mean((predict(mod_women, test_set[test_set$SEX==2 & test_set$IS.framingham==1,],
type = "response") - test_set$CVD[test_set$SEX==2 & test_set$IS.framingham==1])^2)
# Plot ROC for Men
plot(roc_women, main = "ROC Curve for Men")
# Add AUC to the plot
text(0.6, 0.2, auc_women)
# # Print out the AUC and Brier scores
# print(paste("AUC for men:", auc_men))
# print(paste("Brier score for men:", brier_score_men))
# print(paste("AUC for women:", auc_women))
# print(paste("Brier score for women:", brier_score_women))
# Plot the ROC curve for men
plot(roc_men, col = "blue", main = "ROC Curves for Men and Women",
xlab = "1 - Specificity", ylab = "Sensitivity")
# Add the ROC curve for women to the same plot
lines(roc_women, col = "red")
# Add a legend to the plot
legend("bottomright", legend = c("Men", "Women"),
col = c("blue", "red"), lwd = 2)
auc_men
as.numeric(auc_men)
# Plot the ROC curve for men
plot(roc_men, col = "blue", main = "ROC Curves for Men and Women",
xlab = "1 - Specificity", ylab = "Sensitivity")
# Add the ROC curve for women to the same plot
lines(roc_women, col = "red")
# Add a legend to the plot
legend("bottomright", legend = c("Men", "Women"),
col = c("blue", "red"), lwd = 2)
text(0.6, 0.2, auc_men)
text(0.6, 0.2, auc_women)
plot(roc_men, col = "blue", main = "ROC Curves for Men and Women",
xlab = "1 - Specificity", ylab = "Sensitivity")
# Add the ROC curve for women to the same plot
lines(roc_women, col = "red")
# Add a legend to the plot
legend("bottomright", legend = c("Men", "Women"),
col = c("blue", "red"), lwd = 2)
text(0.2, 0.8, auc_men)
text(0.2, 0.7, auc_women)
# Plot the ROC curve for men
plot(roc_men, col = "blue", main = "ROC Curves for Men and Women",
xlab = "1 - Specificity", ylab = "Sensitivity")
# Add the ROC curve for women to the same plot
lines(roc_women, col = "red")
# Add a legend to the plot
legend("bottomright", legend = c("Men", "Women"),
col = c("blue", "red"), lwd = 2)
text(0.2, 0.6, auc_men)
text(0.2, 0.8, auc_women)
plot(roc_men, col = "blue", main = "ROC Curves for Men and Women",
xlab = "1 - Specificity", ylab = "Sensitivity")
# Add the ROC curve for women to the same plot
lines(roc_women, col = "red")
# Add a legend to the plot
legend("bottomright", legend = c("Men", "Women"),
col = c("blue", "red"), lwd = 2)
text(0, 0.6, auc_men)
text(0.2, 0.8, auc_women)
auc_women
# Plot the ROC curve for men
plot(roc_men, col = "blue", main = "ROC Curves for Men and Women",
xlab = "1 - Specificity", ylab = "Sensitivity")
# Add the ROC curve for women to the same plot
lines(roc_women, col = "red")
# Add a legend to the plot
legend("bottomright", legend = c("Men", "Women"),
col = c("blue", "red"), lwd = 2)
text(0, 0.6, auc_men)
text(0.2, 0.8, auc_women)
# Plot the ROC curve for men
plot(roc_men, col = "blue", main = "ROC Curves for Men and Women",
xlab = "1 - Specificity", ylab = "Sensitivity")
# Add the ROC curve for women to the same plot
lines(roc_women, col = "red")
# Add a legend to the plot
legend("bottomright", legend = c("Men", "Women"),
col = c("blue", "red"), lwd = 2)
text(0.2, 0.6, auc_men)
text(0.2, 0.8, auc_women)
# Plot the ROC curve for men
plot(roc_men, col = "blue", main = "ROC Curves for Men and Women",
xlab = "1 - Specificity", ylab = "Sensitivity")
# Add the ROC curve for women to the same plot
lines(roc_women, col = "red")
# Add a legend to the plot
legend("bottomright", legend = c("Men", "Women"),
col = c("blue", "red"), lwd = 2)
text(0.2, 0.6, auc_men)
text(1, 0.8, auc_women)
plot(roc_men, col = "blue", main = "ROC Curves for Men and Women",
xlab = "1 - Specificity", ylab = "Sensitivity")
# Add the ROC curve for women to the same plot
lines(roc_women, col = "red")
# Add a legend to the plot
legend("bottomright", legend = c("Men", "Women"),
col = c("blue", "red"), lwd = 2)
text(0.5, 0.4, auc_men)
text(1, 0.8, auc_women)
